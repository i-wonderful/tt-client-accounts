
Саша Волобуев, [23.01.18 14:32]
Постановка задачи:  1. Спроектировать REST API, включающий в себя все CRUD операции.
 В качестве примера использовать бизнес-объекты: Клиент и Счета клиента. 
Счета клиента содержаться в Клиенте и связаны через его id. Набор атрибутов в самих объектах - минимален 
2. Реализовать микросервис(-ы) реализующий(-ие) API, описанный на шаге 1  
Пример бизнес-объектов: Клиент: имя фамилия отчество дата рождения список счетов 
 Счета клиента: название счета денег на счету валюта счета  Технические детали: 
1. Java 8. Должно быть применение новых фич, но оправданное 
2. SpringBoot 1.5.7+ (SpringMVC). 
Контейнер Undertow 
3. Хранение данных в БД. БД - произвольная 
4. Basic авторизация всех запросов. Одна общая учётка для всех 
5. Запуск приложения из docker-образа. Образ должен поднимать всё необходимое для работы МкС 
6. Наличие HealthCheck 7. Наличие логирования. Все request/response (healthCheck не логируем) и интеграция, если есть 
8. Кастомизация обработки ошибок. МкС должен уметь обрабатывать свои и чужие exceptions. 
 9. Тесты, с применением SpringBootTest, Mockito, JUnit 4 
10. VCS - GIT Дополнительные задания: 1. Слоеная архитектура 2. API описан в swagger нотации 3. Кодогенерация из swagger описания 
4. Использование профилей 
Код выкладываем на GitHub. 
Срок выполнения не более календарных 7 дней с момента получения задания

Саша Волобуев, [23.01.18 14:32]
Также комментарий от тех. лида: 2 пункт – выбор контейнера будет плюсом, но не обязателен, так же как выбор логирования (logback / log4j2) 5 пункт будет желателен, но не обязателен 
 Интересно было бы посмотреть, как кандидат будет реализовывать «общение» между МкС, будут ли попытки использовать RxJava и т.д. Так что я думаю в постановке задачи надо указать что ожидается все-таки два микросервиса.